1. Sed and awk
	http://www.gnu.org/software/sed/
sed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。以下介绍的是Gnu版本的Sed 3.02。

Awk的典型应用是将数据转换成格式化的报表。增强可读性。因此当数据有某种结构时就能最好的体现awk的好处。Awk的功能是非常强大的，甚至可以说成是程序设计语言。
2.	基本介绍
	Sed和awk的输出都不允许送到向程序提供输入的同一个文件，否则会使它变成乱码。如果工作内容中包含shell可执行的字符如“$和*”，那么必须用单引号引起。

	Sed和awk都可以用-f来指定工作内容，这通常就是脚本存放的位置。

	使用过程中，短的脚本可以在命令行上指定，长的脚本通常放在容易被修改和测试的文件中
	在sed和awk中，每个指令都包含两个部分，模式和语句。模式是由/分隔的正则表达式。语句指定一个或多个将被执行的动作。

	Sed和Awk的命令都需要用''单引号引用

	Awk和Sed都将每个输入行识别成一条记录,Awk还将那一行上的每个单词识别成一个字段。(Awk $0 当前行,$n(n>0) 代表当前行第n个字段)

	Awk不自动输出行,脚本中的指令控制awk最终所做的事情。而sed是默认输出行，可以用参数-n屏蔽

	Sed的语句由类似于行编辑器,使用的那些编辑命令组成。大部分命令由单个字母组成。

	Awk的语句程序设计语句和函数组成，语句必须用大括号括起。

3. Sed命令
调用sed命令有两种形式：
(1)		sed [options] 'command' file(s)
			sed 当有多个command时，可以用以下方式
			sed [options] 'command;command;command' files
			or
			sed -e 'command' -e 'command' -e 'command' files
(2)		sed [options] -f scriptfile file(s)
		当command比较多时，最好用scriptfile，执行命令
		scriptfile demo
        s is sustitution是最基本的sed命令
		s/aa/bb/
		s/ac/ac/
		s/ds/cd/

	    sed命令不会修改源文件，要想保存到sed结果，需要用重定向> new file输出到新file中

	-e Editing instruction follows.
	-f Filename of script follows.
	-n Suppress automatic output of input lines.屏蔽自动打印输出，打印特定行在command后面加p
	for example
		sed -n 's/aa/bb/' file	#屏幕没有任何输出
		sed -n 's/aa/bb/p' files #屏幕输出修改的行

    sed 's/day/night/' <old>new 将文件old中的day替换成为night生成new文件,day也可用pattern来表示支持正则表达式
        分析：
            s 是命令 substitution
            /../../是分隔符（也可以用_或者|代替分隔符）
            如 sed 's/\/usr\/bin/local/' 可以用sed 's|/usr/bin|local|'或sed 's_/usr/bin_local_'替代
			

4.awk 命令

	同sed命令格式一致
	创建list文件
	hn Daggett, 341 King Road, Plymouth MA
	Alice Ford, 22 East Broadway, Richmond VA
	Orville Thomas, 11345 Oak Bridge Road, Tulsa OK
	Terry Kalkas, 402 Lans Road, Beaver Falls PA
	Eric Adams, 20 Post Road, Sudbury MA
	Hubert Sims, 328A Brook Road, Roanoke VA
	Amy Wilde, 334 Bayshore Pkwy, Mountain View CA
	Sal Carpenter, 73 6th Street, Boston MA
	
	for example
		awk '{ printf $1 }' list 	输出每一行的第一个字段
		awk '/MA/' list				显示匹配的MA的所有行	
		awk -F, '/MA/ { print $1 }' list	以，为行中字段的分割符，显示含有MA的行的第一个字段
	
        awk -F, 'BEGIN{print "begin"} '/MA/'{print $1} END{print "end"}' list
	-f Filename of script follows.
	-F Change field separator.
	-v var=value follows.


a\	在当前行后面加入一行文本。
b lable	分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。
c\	用新的文本改变本行的文本。
d	从模板块（Pattern space）位置删除行。
D	删除模板块的第一行。
i\	在当前行上面插入文本。
h	拷贝模板块的内容到内存中的缓冲区。
H	追加模板块的内容到内存中的缓冲区
g	获得内存缓冲区的内容，并替代当前模板块中的文本。
G	获得内存缓冲区的内容，并追加到当前模板块文本的后面。
l	列表不能打印字符的清单。
n	读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。
N	追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。
p	打印模板块的行。
P（大写）打印模板块的第一行。
q	退出Sed。
r file	从file中读行。
t label	if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
T label	错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
w file	写并追加模板块到file末尾。
W file	写并追加模板块的第一行到file末尾。
!	表示后面的命令对所有没有被选定的行发生作用。
s/re/string	用string替换正则表达式re。
=	打印当前行号码。
#	把注释扩展到下一个换行符以前。
以下的是替换标记
*
g表示行内全面替换。
*
p表示打印行。
*
w表示把行写入一个文件。
*
x表示互换模板块中的文本和缓冲区中的文本。
*
y表示把一个字符翻译为另外的字符（但是不用于正则表达式）

4. 选项
-e command, --expression=command
允许多台编辑。
-h, --help
打印帮助，并显示bug列表的地址。
-n, --quiet, --silent

取消默认输出。
-f, --filer=script-file
引导sed脚本文件名。
-V, --version
打印版本和版权信息。

5. 元字符集
^
锚定行的开始 如：/^sed/匹配所有以sed开头的行。 
$
锚定行的结束 如：/sed$/匹配所有以sed结尾的行。 
.
匹配一个非换行符的字符 如：/s.d/匹配s后接一个任意字符，然后是d。 
*
匹配零或多个字符 如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。 
[]
匹配一个指定范围内的字符，如/[Ss]ed/匹配sed和Sed。 
[^]
匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。 
\(..\)
保存匹配的字符，如s/\(love\)able/\1rs，loveable被替换成lovers。 
&
保存搜索字符用来替换其他字符，如s/love/**&**/，love这成**love**。 
\<
锚定单词的开始，如:/\<love/匹配包含以love开头的单词的行。 
\>
锚定单词的结束，如/love\>/匹配包含以love结尾的单词的行。 
x\{m\}
重复字符x，m次，如：/0\{5\}/匹配包含5个o的行。 
x\{m,\}
重复字符x,至少m次，如：/o\{5,\}/匹配至少有5个o的行。 
x\{m,n\}
重复字符x，至少m次，不多于n次，如：/o\{5,10\}/匹配5--10个o的行。
6. 实例
删除：d命令
*
$ sed '2d' example-----删除example文件的第二行。
*
$ sed '2,$d' example-----删除example文件的第二行到末尾所有行。
*
$ sed '$d' example-----删除example文件的最后一行。
*
$ sed '/test/'d example-----删除example文件所有包含test的行。
替换：s命令
*
$ sed 's/test/mytest/g' example-----在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。
*
$ sed -n 's/^test/mytest/p' example-----(-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它。
*
$ sed 's/^192.168.0.1/&localhost/' example-----&符号表示替换换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加 localhost，变成192.168.0.1localhost。
*
$ sed -n 's/\(love\)able/\1rs/p' example-----love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。
*
$ sed 's#10#100#g' example-----不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100。
选定行的范围：逗号
*
$ sed -n '/test/,/check/p' example-----所有在模板test和check所确定的范围内的行都被打印。
*
$ sed -n '5,/^test/p' example-----打印从第五行开始到第一个包含以test开始的行之间的所有行。
*
$ sed '/test/,/check/s/$/sed test/' example-----对于模板test和west之间的行，每行的末尾用字符串sed test替换。
多点编辑：e命令
*
$ sed -e '1,5d' -e 's/test/check/' example-----(-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执 行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。
*
$ sed --expression='s/test/check/' --expression='/love/d' example-----一个比-e更好的命令是--expression。它能给sed表达式赋值。
从文件读入：r命令
*
$ sed '/test/r file' example-----file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面。
写入文件：w命令
*
$ sed -n '/test/w file' example-----在example中所有包含test的行都被写入file里。
追加命令：a命令
*
$ sed '/^test/a\\--->this is a example' example<-----'this is a example'被追加到以test开头的行后面，sed要求命令a后面有一个反斜杠。
插入：i命令
$ sed '/test/i\\
new line
-------------------------' example
如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面。
下一个：n命令
*
$ sed '/test/{ n; s/aa/bb/; }' example-----如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续。
变形：y命令
*
$ sed '1,10y/abcde/ABCDE/' example-----把1--10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令。
退出：q命令
*
$ sed '10q' example-----打印完第10行后，退出sed。
保持和获取：h命令和G命令
*
$ sed -e '/test/h' -e '$G example-----在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保 持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中 的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。
保持和互换：h命令和x命令
*
$ sed -e '/test/h' -e '/check/x' example -----互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换。
7. 脚本
Sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。




（1）cat /build/envsetup.sh | sed -n "/^function /s/function \([a-z_]*\).*/\1/p" | sort		按照字母排序显示evesetup.sh中的函数名function method()
分析sed：
	sed -n "/^function /p"	只打印以fucntion开头的行
	s/function \([a-z_]*\).*\1	保留方法名称（）中为保留参数	\1代表第1个（）中保留的内容

（2）s/..../..../ 其中/可以用":","_","|"代替，在替换路径时使表达式容易读
	echo "/work/documents/bash/code_example" | sed 's:/work/documents:/replace:'		将/work/documents替换为/replace
	/replace/bash/code_examples

（3）echo "MAKE_VERSION is 3.81" | sed 's/[^0-9\.]*//'	取字符串中的数字和.

 (4) sed 's/^[ \t]*//' file	去除每行开头的空格或tab键
 (5) sed -n '/^$/p' file匹配空行 sed -n '/^[ \t]*$/p' file(匹配含有空格的空行)
	删除空行命令可以 sed '/^[ \t]*$/d' file


sed命令直接修改文件

sed -i 's/old/new/g' filename 将filename文件中所有old替换成new

sed -i 's/IPOD/iPod/' `find ./ -name strings.xml` 当前目录下所有strings.xml文件中的所有字符串IPOD替换成iPod
注意 sed pattern 用''用单引号 而后面find符号为`数字1前面的按键+shift



