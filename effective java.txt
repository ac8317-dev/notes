第六章(方法)
	(23)	检查参数的有效性
	(24)	需要时使用保护性拷贝	
		不可变类	final类
				private成员变量
				构造参数,是否可变的
				get方法,获取拷贝内容防止改变
	(25)	谨慎设计方法原型
			方法命名	the java developers almanac
			方法参数	
			参数类型优先选择接口

	(26)	谨慎重载方法	继承

	(27)	返回零长度数组而不是null

	(28)	为所有导出的api元素编写文档注释

第七章(通用程序设计)
	(29)	将局部变量的作用域最消化(在第一次使用它的地方声明)

	(30)	了解和使用库
		打印数组	Log.d(TAG, ""+Arrays.asList(array));java1.4不支持
			Log.d(TAG, ""+Arrays.toString(array));

	(31)	精确计算不要使用float和double	可以使用int(10进制9位),long(10进制18位)或者BigDecimal(慢)

	(32)	如果其它类型适合,请避免使用字符串	(不适合用字符串替代枚举类型,聚集类型)	

	(33)	了解字符串的链接性能	
		+ 将两个字符串链接的便利操作符,string是不可变的,+需要复制两个字符串,+随操作数的增加,所用时间称n的平方级增加;
		多个字符串相连最好使用StringBuilder.append(),构造时指定StringBuilder长度效率更高,但是注意不要越界

	(34)	通过接口引用对象

	(35)	接口优先与反射机制	java.lang.reflect
	
	(36)	谨慎的使用本地方法	

	(37)	谨慎的进行优化

	(38)	遵守普遍命名惯例

第八章(异常)

	(39)	只对不正常的条件才使用异常

	(40)	对于可恢复条件使用被检查的异常,对于程序错误使用运行时异常

	(41)	避免不必要使用被检查异常
			添加判断条件		

	(42)	尽量使用标准异常	
		IllegalArgumentException
		IllegalStateException
		NullPoniterException
		IndexOutOfBoundsException
		ConcurrentModificationException
		UnsupportedOperationException
	
	(43)	抛出的异常要适合于相应的抽象
			高层的实现要捕获底层的异常,同时要转译成顶层能够解释的异常

	(44)	每个方法抛出的异常都要有文档

	(45)	在细节消息中包含失败--捕获信息

	(46)	努力使失败保持原子性(抛出异常后,恢复原始状态)
			使用非可变对象
			参数的有效性检查		

	(47)	不要乎略异常


	
