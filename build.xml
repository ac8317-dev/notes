<?xml version="1.0" encoding="UTF-8"?>
<project name="TestApp" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.  It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />
	
    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
	<!-- 环境变量 -->
	<property environment="env" />
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME" />
    </condition>
	<!-- 应用的名称 -->
	<property name="appName" value="${ant.project.name}" />
	<!-- 应用的包目录 -->
	<property name="appPackage" value="com.android.testapp" />
	<!--File 分割符 windows is \ and unix is /-->
	<property name="separator" value="${file.separator}"/>

	<property name="jdk-version" value="${ant.java.version}" />
	<property name="sdk-home" value="${sdk.dir}"/>
	<!-- SDK目录(获取操作系统环境变量ANDROID_SDK_HOME的值) -->
	<property name="sdk-folder" value="${sdk-home}" />
	<!-- SDK中tools目录 -->
	<property name="sdk-tools" value="${sdk-home}${separator}tools" />
	<!-- SDK指定平台目录 -->
	<property name="sdk-platform-folder" value="${sdk-home}${separator}platforms/android-8" />
	<!-- SDK指定平台的tools目录 -->
	<property name="sdk-platform-tools" value="${sdk-home}${separator}platform-tools" />

	<!--定义工具 -->
	<condition property="exe" value=".exe" else="">
		<os family="windows" />
	</condition>

	<property name="aapt" value="${sdk-platform-tools}${separator}aapt${exe}" />
	<property name="aidl" value="${sdk-platform-tools}${separator}aidl${exe}" />
	<property name="dx" value="${sdk-platform-tools}${separator}dx" />
	<property name="adb" value="${sdk-platform-tools}${separator}adb${exe}" />

	<property name="apkbuilder" value="${sdk-tools}${separator}apkbuilder${exe}" />
	<property name="zipalign" value="${sdk-tools}${separator}zipalign${exe}" />

	<property name="jarsigner" value="${env.JAVA_HOME}${separator}bin${separator}jarsigner${exe}" />

	<!-- 生成R文件的相对目录 -->
	<property name="outdir-gen" value="gen" />
	<!-- 编译后的文件放置目录 -->
	<property name="outdir-bin" value="bin" />

	<!-- 生成class目录 -->
	<property name="outdir-classes" value="${outdir-bin}" />
	<property name="outdir-classes-ospath" value="${basedir}${separator}${outdir-classes}" />

	<!-- 资源文件目录 -->
	<property name="resource-dir" value="res" />
	<property name="assets-dir" value="assets" />

	<!-- 配置清单文件 -->
	<property name="android-manifest-xml" value="AndroidManifest.xml" />

	<!-- 编译时需要的jar,如果项目需要使用到地图服务则需要maps.jar -->
	<property name="android-jar" value="${sdk-platform-folder}${separator}android.jar" />
	<property name="android-maps-jar" value="${sdk-home}${separator}add-ons${separator}addon_google_apis_google_inc_8${separator}libs${separator}maps.jar" />


	<!-- 编译aidl文件所需的预处理框架文件framework.aidl -->
	<property name="framework-aidl" value="${sdk-platform-folder}${separator}framework.aidl" />

	<!-- Java源文件目录 -->
	<property name="srcdir" value="src" />
	<property name="srcdir-ospath" value="${basedir}${separator}${srcdir}" />

	<!-- 外部类库所在目录 -->
	<property name="external-lib" value="libs" />
	<property name="external-lib-ospath" value="${basedir}${separator}${external-lib}" />

	<!-- proguard所在目录 -->
	<property name="proguard-dir" value="proguard" />
	<property name="proguard-lib" value="${proguard-dir}${separator}proguard.jar" />
	<property name="unoptimized" value="${proguard-dir}${separator}unoptimized.jar" />
	<property name="optimized" value="${proguard-dir}${separator}optimized.jar" />

	<!-- classes.dex相关变量 -->
	<property name="dex-file" value="classes.dex" />
	<property name="dex-path" value="${outdir-bin}${separator}${dex-file}" />
	<property name="dex-ospath" value="${basedir}${separator}${dex-path}" />

	<!-- 经过aapt生成的资源包文件 -->
	<property name="resources-package" value="${outdir-bin}${separator}resources.ap_" />
	<property name="resources-package-ospath" value="${basedir}${separator}${resources-package}" />

	<!-- 未签名apk包 -->
	<property name="out-unsigned-package" value="${outdir-bin}${separator}${appName}-unsigned.apk" />
	<property name="out-unsigned-package-ospath" value="${basedir}${separator}${out-unsigned-package}" />

	<!-- 证书文件 -->
	<property name="keystore-file" value="${separator}work${separator}app${separator}archermind.keystore" />
	<property name="value_storepass" value="archermind"/>
	<property name="value_keypass" value="archermind"/>
	<property name="alias-keystore" value="archermind.keystore"/>

	<!-- 已签名apk包 -->
	<property name="out-signed-package" value="${outdir-bin}${separator}${appName}-signed.apk" />
	<property name="out-signed-package-ospath" value="${basedir}${separator}${out-signed-package}" />

	<!-- 优化后apk包 -->
	<property name="out-zipalign-package" value="${outdir-bin}${separator}${appName}.apk" />
	<property name="out-zipalign-package-ospath" value="${basedir}${separator}${out-zipalign-package}" />

	<target name="init">
		<echo>${appName}</echo>
		<echo>${appPackage}</echo>
		<echo>${sdk-home}</echo>
		<echo>${sdk-tools}</echo>
		<echo>${jdk-version}</echo>
		<echo>${sdk-platform-folder}</echo>
		<echo>${sdk-platform-tools}</echo>
		<echo>${aapt}</echo>
		<echo>${aidl}</echo>
		<echo>${dx}</echo>
		<echo>${apkbuilder}</echo>
		<echo>${jarsigner}</echo>
		<echo>${zipalign}</echo>
		<echo>${adb}</echo>
		<echo>${outdir-gen}</echo>
		<echo>${outdir-bin}</echo>
		<echo>${outdir-classes}</echo>
		<echo>${outdir-classes-ospath}</echo>
		<echo>${resource-dir}</echo>
		<echo>${assets-dir}</echo>
		<echo>${android-manifest-xml}</echo>
		<echo>${android-jar}</echo>
		<echo>${android-maps-jar}</echo>
		<echo>${framework-aidl}</echo>
		<echo>${srcdir}</echo>
		<echo>${srcdir-ospath}</echo>
		<echo>${external-lib}</echo>
		<echo>${external-lib-ospath}</echo>
		<echo>${proguard-dir}</echo>
		<echo>${proguard-lib}</echo>
		<echo>${unoptimized}</echo>
		<echo>${optimized}</echo>
		<echo>${dex-file}</echo>
		<echo>${dex-path}</echo>
		<echo>${dex-ospath}</echo>
		<echo>${resources-package}</echo>
		<echo>${resources-package-ospath}</echo>
		<echo>${out-unsigned-package}</echo>
		<echo>${out-unsigned-package-ospath}</echo>
		<echo>${keystore-file}</echo>
		<echo>${out-signed-package}</echo>
		<echo>${out-signed-package-ospath}</echo>
		<echo>${out-zipalign-package}</echo>
		<echo>${out-zipalign-package-ospath}</echo>
	</target>

	<target name="initDir" depends="init">
		<echo>初始化文件夹...</echo>
		<delete dir="${outdir-classes}" />
		<mkdir dir="${outdir-classes}" />
		<echo>初始化文件夹完成...</echo>
	</target>

	<!-- 根据工程中的资源文件生成R.java文件 -->
	<target name="gen-R" depends="initDir">
		<echo>生成R.java文件...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<!-- 输出详细内容 -->
			<arg value="-v" />
			<!-- 强制覆盖已存在的文件 -->
			<arg value="-f" />
			<!-- 在-J指定的位置下生成相应的包的目录 -->
			<arg value="-m" />
			<!-- 指定R.java文件生成的目录 -->
			<arg value="-J" />
			<arg value="${outdir-gen}" />
			<!-- 指定资源文件目录 -->
			<arg value="-S" />
			<arg value="${resource-dir}" />
			<!-- 指定assets文件目录 -->
			<arg value="-A" />
			<arg value="${assets-dir}" />
			<!-- 指定配置清单文件 -->
			<arg value="-M" />
			<arg value="${android-manifest-xml}" />
			<!-- 引入类库 -->
			<arg value="-I" />
			<arg value="${android-jar}" />
		</exec>
		<echo>R.java文件生成完成...</echo>
	</target>

	<!-- 编译aidl文件 -->
	<target name="aidl" depends="gen-R">
		<echo>开始编译.aidl文件为.java文件...</echo>
		<apply executable="${aidl}" failonerror="true" verbose="true">
			<!-- aidl声明的目录 -->
			<arg value="-I${srcdir}" />
			<!-- 指定预处理文件 -->
			<arg value="-p${framework-aidl}" />
			<!-- 目标文件目录 -->
			<arg value="-o${outdir-gen}" />
			<!-- 指定哪些文件需要编译 -->
			<fileset dir="${srcdir}">
				<include name="**/*.aidl" />
			</fileset>
		</apply>
		<echo>aidl文件编译完成...</echo>
	</target>

	<!-- 将工程中的java源文件编译成class文件 -->
	<target name="compile" depends="aidl">
		<echo>编译Java源文件...</echo>
		<!-- bootclasspath 指定引导类文件的位置-->
		<javac encoding="GB18030" target="${jdk-version}" srcdir="." destdir="${outdir-classes}" bootclasspath="${android-jar}" verbose="true" 
		includeantruntime="false">
			<classpath>
				<fileset dir="${external-lib}" includes="**/*.jar" />
				<filelist>
					<file name="${android-maps-jar}" />
				</filelist>
			</classpath>
		</javac>
		<echo>Java源文件编译完成...</echo>
	</target>

	<!-- 将class文件进行混淆 -->
	<target name="optimize">
	<!--
		<echo>开始进行代码混淆...</echo>
		<jar basedir="${outdir-classes}" destfile="${unoptimized}" />
		<java jar="${proguard-lib}" fork="true" failonerror="true">
	-->
			<!-- Dmaximum.inlined.code.length 默认值为8 设置内联代码的长度 -->
	<!--<jvmarg value="-Dmaximum.inlined.code.length=32" />-->
			<!-- 指定配置文件 -->
	<!--
			<arg value="@proguard.cfg" />
			<arg value="-injars ${unoptimized}" />
			<arg value="-outjars ${optimized}" />
			<arg value="-libraryjars ${android-jar}" />
			<arg value="-libraryjars ${android-maps-jar}" />
			<arg value="-libraryjars ${external-lib}/core.jar " />
		</java>
		<delete dir="${outdir-classes}" />
		<mkdir dir="${outdir-classes}" />
		<unzip src="${optimized}" dest="${outdir-classes}" />
		<delete file="${unoptimized}" />
		<delete file="${optimized}" />
		<echo>代码混淆完成...</echo>
	-->
	</target>
	<!-- 将.class文件转化成.dex文件 -->
	<target name="dex" depends="compile, optimize">
		<echo>编译文件和引用类库转化为.dex文件...</echo>
		<exec executable="${dx}" failonerror="true">
			<arg value="--dex" />
			<arg value="--verbose" />
			<arg value="--output=${dex-ospath}" />
			<!-- 要生成.dex文件的源classes和libraries -->
			<arg value="${outdir-classes-ospath}" />
			<arg value="${external-lib-ospath}" />
		</exec>
		<echo>.dex文件转换完成...</echo>
	</target>

	<!-- 将资源文件放进输出目录 -->
	<target name="package-res-and-assets">
		<echo>开始转化资源文件...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<!-- 输出详细内容 -->
			<arg value="-v" />
			<!-- 强制覆盖已存在的文件 -->
			<arg value="-f" />
			<!-- 指定资源文件目录 -->
			<arg value="-S" />
			<arg value="${resource-dir}" />
			<!-- 指定assets文件目录 -->
			<arg value="-A" />
			<arg value="${assets-dir}" />
			<!-- 指定配置清单文件 -->
			<arg value="-M" />
			<arg value="${android-manifest-xml}" />
			<!-- 引入类库 -->
			<arg value="-I" />
			<arg value="${android-jar}" />
			<!-- 指定要生成的包 -->
			<arg value="-F" />
			<arg value="${resources-package}" />
		</exec>
		<echo>资源文件转化完成...</echo>
	</target>

	<!-- 打包成未签名的apk -->
	<target name="package" depends="dex, package-res-and-assets">
		<echo>开始打包未签名程序...</echo>
		<exec executable="${apkbuilder}" failonerror="true">
			<arg value="${out-unsigned-package-ospath}" />
			<!-- 输出详细内容 -->
			<arg value="-v" />
			<!-- 创建未签名程序 -->
			<arg value="-u" />
			<!-- 指定dex文件添加到应用程序包中 -->
			<arg value="-f" />
			<arg value="${dex-ospath}" />
			<!-- 指定资源文件添加到应用程序包中 -->
			<arg value="-z" />
			<arg value="${resources-package-ospath}" />
			<!-- 参照源文件的目录结构 -->
			<arg value="-rf" />
			<arg value="${srcdir-ospath}" />
		</exec>
		<echo>未签名程序打包完成...</echo>
	</target>

	<!-- 对apk进行签名 -->
	<target name="jarsigner" depends="package">
		<echo>开始为apk文件签名...</echo>
		<exec executable="${jarsigner}" failonerror="true">
			<!-- 签名/验证时输出详细信息 -->
			<arg value="-verbose" />
			<!-- 密钥库位置 -->
			<arg value="-keystore" />
			<arg value="${keystore-file}" />
			<!-- 用于密钥库完整性的口令 -->
			<arg value="-storepass" />
			<arg value="${value_storepass}" />
			<!-- 专用密钥的口令（如果不同）-->
			<arg value="-keypass" />
			<arg value="${value_keypass}" />
			<!-- 已签名的 JAR文件的名称 -->
			<arg value="-signedjar" />
			<arg value="${out-signed-package-ospath}" />
			<!-- 要签名的JAR文件--> 
			<arg value="${out-unsigned-package-ospath}" />
			<!-- 文件别名 -->
			<arg value="${alias-keystore}" />
		</exec>
		<echo>apk文件签名完成...</echo>
	</target>

	<!-- 对apk进行优化 -->
	<target name="zipalign" depends="jarsigner">
		<echo>开始对apk文件进行优化...</echo>
		<exec executable="${zipalign}" failonerror="true">
			<!-- 覆盖已经存在的文件 -->
			<arg value="-f" />
			<!-- 输出详细内容 -->
			<arg value="-v" />
			<!-- 以字节为单位对齐  4 提供了32位对齐 -->
			<arg value="4" />
			<!-- 需要优化的apk文件 -->
			<arg value="${out-signed-package}" />
			<!-- 优化完成的apk文件 -->
			<arg value="${out-zipalign-package}" />
		</exec>
		<echo>apk文件优化完成...</echo>
	</target>

	<!-- 发布 -->
	<target name="release" depends="zipalign">
		<!-- 删除未签名apk -->
		<delete file="${out-unsigned-package-ospath}" />
		<delete file="${out-signed-package}" />
		<echo>APK文件生成完成,生成目录:${out-zipalign-package-ospath}</echo>
	</target>

	<!-- 安装 -->
	<target name="install">
		<echo>开始安装apk文件...</echo>
		<exec executable="${adb}" failonerror="true">
			<arg value="install" />
			<arg value="${out-zipalign-package}" />
		</exec>
		<echo>apk文件安装完成...</echo>
	</target>

	<!-- 重新安装 -->
	<target name="reinstall">
		<echo>重新安装apk文件...</echo>
		<exec executable="${adb}" failonerror="true">
			<arg value="install" />
			<arg value="-r" />
			<arg value="${out-zipalign-package}" />
		</exec>
		<echo>重新安装apk文件完成...</echo>
	</target>

	<!-- 卸载 -->
	<target name="uninstall">
		<echo>开始卸载apk文件...</echo>
		<exec executable="${adb}" failonerror="true">
			<arg value="uninstall" />
			<arg value="${appPackage}" />
		</exec>
		<echo>apk文件卸载完成...</echo>
	</target>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk-tools}${separator}ant${separator}build.xml" />

</project>
